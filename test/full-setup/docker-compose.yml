#                                                                         __
# .-----.-----.______.-----.----.-----.--.--.--.--.______.----.---.-.----|  |--.-----.
# |  _  |  _  |______|  _  |   _|  _  |_   _|  |  |______|  __|  _  |  __|     |  -__|
# |___  |_____|      |   __|__| |_____|__.__|___  |      |____|___._|____|__|__|_____|
# |_____|            |__|                   |_____|
#
# Copyright (c) 2022 Fabio Cicerchia. https://fabiocicerchia.it. MIT License
# Repo: https://github.com/fabiocicerchia/go-proxy-cache

version: '3.8'

services:
  # CORE - GOPROXYCACHE
  ##############################################################################
  go-proxy-cache:
    build:
      context: ../..
      dockerfile: Dockerfile
      network: host
      args:
        BUILD_CMD: build-race
    command: ["go-proxy-cache", "-debug"]
    environment:
      ENV: test
    depends_on:
      redis:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    ports:
      - "50080:50080" # HTTP
      - "50443:50443" # HTTPS
      - "52021:52021" # GPC Internals
    volumes:
      - ./config.yml:/app/config.yml
      - ./certs:/app/certs

  # STORAGE - REDIS
  ##############################################################################
  redis:
    image: redis:6.2.6-alpine3.15
    ports:
      - "6379:6379" # Redis
    sysctls:
      # WARNING: The TCP backlog setting of 511 cannot be enforced because
      # /proc/sys/net/core/somaxconn is set to the lower value of 128.
      net.core.somaxconn: 1024
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  # UPSTREAM 1 - NGINX
  ##############################################################################
  nginx:
    build:
      context: .
      dockerfile: docker/Dockerfile.nginx
      network: host
    restart: always
    depends_on:
      jaeger:
        condition: service_healthy
    volumes:
      - ./nginx/vhost.conf:/etc/nginx/conf.d/vhost.conf
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd
      - ./certs:/certs
    ports:
      - "40080:40080" # HTTP
      - "40443:40443" # HTTPS
      - "40081:40081" # WS
      - "40082:40082" # WSS

  # UPSTREAM 2 - NODEJS
  ##############################################################################
  node:
    image: node:17.8.0-alpine3.15
    restart: always
    command: "npm start"
    user: "1000:1000"
    working_dir: /home/app
    depends_on:
      jaeger:
        condition: service_healthy
    volumes:
      - ./ws:/home/app
      - ./certs:/home/app/certs
    ports:
      - "9001:9001" # WS
      - "9002:9002" # WSS

  # TRACING - JAEGER
  ##############################################################################
  jaeger:
    image: jaegertracing/all-in-one:1.32.0
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    environment:
      COLLECTOR_ZIPKIN_HTTP_PORT: 9411
    healthcheck:
      test: ["CMD", "/go/bin/all-in-one-linux", "status"]
      timeout: 5s
      retries: 5
      start_period: 10s

  # METRICS - PROMETHEUS
  ##############################################################################
  prometheus:
    image: prom/prometheus:v2.34.0
    ports:
      - "9090:9090" # Prometheuspbertera/syslogserver
    command: --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  # DASHBOARD - GRAFANA
  ##############################################################################
  grafana:
    image: grafana/grafana:8.4.4-ubuntu
    ports:
      - "3001:3000" # Grafana

  # LOGS - SYSLOG
  ##############################################################################
  syslog:
    image: pbertera/syslogserver:latest
    environment:
      SYSLOG_USERNAME: admin
      SYSLOG_PASSWORD: 1234
    ports:
      - "8080:80" # pimpmylogs
      - "514:514/udp" # rsyslog

  # LOGS - SENTRY
  ##############################################################################
  sentry:
    image: sentry:9.1.2
    depends_on:
      - postgres
      - redis
    environment:
      SENTRY_SECRET_KEY: test
      SENTRY_REDIS_HOST: redis
      SENTRY_POSTGRES_HOST: postgres
      SENTRY_DB_USER: sentry
      SENTRY_DB_PASSWORD: secret
    ports:
      - "9000:9000" # sentry
  postgres:
    image: postgres:14.2-alpine3.15
    environment:
      POSTGRES_USER: sentry
      POSTGRES_PASSWORD: secret
    ports:
      - "5432:5432" # postgres
